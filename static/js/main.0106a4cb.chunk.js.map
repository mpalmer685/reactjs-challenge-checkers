{"version":3,"sources":["webpack:///./src/workers/minimax.worker.js?931b","theme.js","models/gameBoard.js","models/ArtificialPlayer.js","components/Square.js","components/GameContext.js","components/Token.js","components/AvailableMove.js","components/BoardSquare.js","components/Board.js","components/CheckersGame.js","index.js","workers/minimax.worker.js"],"names":["module","exports","Worker","theme","boardBorderColor","boardRedColor","boardBlackColor","pieceRed","pieceBlack","positionsAreEqual","p1","p2","row","column","getOpponent","player","Direction","black","red","KingRow","GameBoard","state","setUpBoard","this","cloneDeep","parseState","rows","Array","fill","map","forEach","value","index","toPosition","piece","position","filter","Boolean","fromPosition","start","moves","offsets","offset","isKing","push","o","isLocationValid","location","isLocationOccupied","nextPosition","from","to","checkJump","jumpOffset","fromLocation","captures","previousJumps","captureLocation","jumpLocation","capturedPiece","includes","jumps","concat","some","m","getPieces","flatMap","availableMovesFromPosition","move","availableMoves","processMove","moveStart","moveEnd","matchesMove","other","length","every","p","i","jumpMoves","jumpStartPositions","find","slice","formatSquare","square","identifier","substr","toUpperCase","toLowerCase","getState","join","columns","Math","floor","n","indexOf","isArray","replace","split","_","c","worker","minimaxStrategy","searchDepth","board","a","getBestMove","ArtificialPlayer","strategy","Strategy","easy","availableMovesForPlayer","sample","medium","hard","Square","styled","div","props","GameContext","React","createContext","pieces","movesForCurrentPlayer","startPosition","selectSquare","TokenRoot","svg","path","startX","startY","segments","coordinate","x","y","pathBuilder","moveTo","moveBy","dx","dy","lineBy","circle","r","close","build","Token","viewBox","className","cx","cy","d","borderOuterRadius","fillRule","Indicator","isMoveStart","AvailableMove","BoardSquareContainer","BoardSquare","currentPosition","useContext","pieceAtPosition","isStartPosition","isAvailableDestination","onClick","useGameContext","BoardContainer","Board","squares","renderSquare","memo","Globals","createGlobalStyle","Title","h1","GameStateDisplay","h2","GameState","getInitialState","currentPlayer","gameState","createAction","type","actionCreator","payload","setStartPosition","makeMove","reset","gameReducer","availableMovesForCurrentPlayer","opponent","nextState","winner","height","width","display","flexDirection","flex","padding","paddingLeft","CheckersGame","aiPlayer","useRef","boardRef","current","useReducer","dispatch","useEffect","getNextMove","then","useCallback","selectedPosition","getPieceAtPosition","contextValue","useMemo","Provider","ReactDOM","render","StrictMode","document","getElementById","inst","wrap","f"],"mappings":"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","file":"static/js/main.0106a4cb.chunk.js","sourcesContent":["module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"4ba19dc2a72202716042.worker.js\");\n};","const black = '#0F0D13'\nconst red = '#fa4a47'\nconst yellow = '#F6F873'\n\nconst theme = {\n    boardBorderColor: yellow,\n    boardRedColor: red,\n    boardBlackColor: black,\n\n    pieceRed: '#E53434',\n    pieceBlack: '#584a4a',\n}\n\nexport default theme\n","import cloneDeep from 'lodash/cloneDeep'\n\nexport function position(row, column) {\n    return { row, column }\n}\n\nexport function positionsAreEqual(p1, p2) {\n    return (\n        p1 != null &&\n        p2 != null &&\n        p1?.row === p2?.row &&\n        p1?.column === p2?.column\n    )\n}\n\nexport function getOpponent(player) {\n    return player === 'red' ? 'black' : 'red'\n}\n\nconst Direction = {\n    black: 1,\n    red: -1,\n}\n\nconst KingRow = {\n    black: 7,\n    red: 0,\n}\n\nexport class GameBoard {\n    static fromState(state) {\n        const boardState = parseState(state)\n        return new GameBoard(boardState)\n    }\n\n    constructor(state = setUpBoard()) {\n        this.state = cloneDeep(state)\n    }\n\n    getState() {\n        const rows = new Array(8).fill(null).map(() => new Array(8).fill(null))\n        this.state.forEach((value, index) => {\n            if ((index + 1) % 9 === 0) return\n\n            const { row, column } = toPosition(index)\n            rows[row][column] = value\n        })\n        return rows\n    }\n\n    getPieces() {\n        return this.state\n            .map((piece, index) =>\n                piece\n                    ? {\n                          position: toPosition(index),\n                          piece,\n                      }\n                    : null\n            )\n            .filter(Boolean)\n    }\n\n    getPieceAtPosition(position) {\n        return this.state[fromPosition(position)]\n    }\n\n    availableMovesFromPosition(position) {\n        const start = fromPosition(position)\n        const piece = this.state[start]\n        if (piece === null) {\n            return []\n        }\n\n        const moves = []\n\n        const offsets = [4, 5].map(offset => offset * Direction[piece.player])\n        if (piece.isKing) {\n            offsets.push(...offsets.map(o => o * -1))\n        }\n\n        const isLocationValid = location =>\n            location >= 0 && location <= 34 && (location + 1) % 9 > 0\n\n        const isLocationOccupied = location =>\n            !!this.state[location] && location !== start\n\n        offsets.forEach(offset => {\n            const nextPosition = start + offset\n            if (isLocationValid(nextPosition) && !this.state[nextPosition]) {\n                moves.push({\n                    from: position,\n                    to: toPosition(nextPosition),\n                })\n            }\n        })\n\n        const checkJump = (\n            jumpOffset,\n            fromLocation,\n            captures,\n            previousJumps = []\n        ) => {\n            const captureLocation = fromLocation + jumpOffset\n            const jumpLocation = captureLocation + jumpOffset\n\n            const capturedPiece = this.state[captureLocation]\n            if (\n                !capturedPiece ||\n                capturedPiece.player === piece.player ||\n                !isLocationValid(jumpLocation) ||\n                isLocationOccupied(jumpLocation) ||\n                captures.includes(captureLocation)\n            ) {\n                return\n            }\n\n            captures.push(captureLocation)\n            moves.push({\n                jumps: previousJumps,\n                from: toPosition(fromLocation),\n                to: toPosition(jumpLocation),\n                captures: toPosition(captureLocation),\n            })\n\n            offsets\n                .filter(o => o !== -1 * jumpOffset)\n                .forEach(offset => {\n                    checkJump(\n                        offset,\n                        jumpLocation,\n                        captures,\n                        previousJumps.concat([toPosition(fromLocation)])\n                    )\n                })\n        }\n\n        offsets.forEach(offset => {\n            checkJump(offset, start, [])\n        })\n\n        return moves.some(m => m.captures)\n            ? moves.filter(m => m.captures)\n            : moves\n    }\n\n    availableMovesForPlayer(player) {\n        const moves = this.getPieces()\n            .filter(({ piece }) => piece.player === player)\n            .flatMap(({ position }) =>\n                this.availableMovesFromPosition(position)\n            )\n\n        return moves.some(m => m.captures)\n            ? moves.filter(m => m.captures)\n            : moves\n    }\n\n    makeMove(move, availableMoves) {\n        const processMove = move => {\n            const moveStart = fromPosition(move.from)\n            const moveEnd = fromPosition(move.to)\n\n            const piece = this.state[moveStart]\n            if (!piece) {\n                return\n            }\n\n            if (move.to.row === KingRow[piece.player]) {\n                piece.isKing = true\n            }\n\n            this.state[moveEnd] = piece\n            this.state[moveStart] = null\n\n            if (move.captures) {\n                this.state[fromPosition(move.captures)] = null\n            }\n        }\n\n        const matchesMove = move => other => {\n            return (\n                positionsAreEqual(move.from, other.from) &&\n                positionsAreEqual(move.to, other.to) &&\n                move.jumps?.length === other.jumps?.length &&\n                move.jumps?.every((p, i) =>\n                    positionsAreEqual(p, other.jumps[i])\n                )\n            )\n        }\n\n        if (move.jumps && move.jumps.length > 0) {\n            const jumpMoves = []\n            const jumpStartPositions = move.jumps.concat([move.from])\n            for (let i = 0; i < jumpStartPositions.length - 1; ++i) {\n                const from = jumpStartPositions[i]\n                const to = jumpStartPositions[i + 1]\n                const move = availableMoves.find(\n                    matchesMove({\n                        from,\n                        to,\n                        jumps: jumpStartPositions.slice(0, i),\n                    })\n                )\n                jumpMoves.push(move)\n            }\n            jumpMoves.push(move)\n\n            jumpMoves.forEach(processMove)\n        } else {\n            processMove(move)\n        }\n\n        return this.getPieces()\n    }\n\n    toString() {\n        const formatSquare = square => {\n            if (square === null) return ' '\n            const identifier = square.player.substr(0, 1)\n            return square.isKing\n                ? identifier.toUpperCase()\n                : identifier.toLowerCase()\n        }\n\n        return this.getState()\n            .map(row => row.map(formatSquare).join(' '))\n            .join('\\n')\n    }\n}\n\nfunction setUpBoard() {\n    return parseState([\n        '  b   b   b   b',\n        'b   b   b   b  ',\n        '  b   b   b   b',\n        '               ',\n        '               ',\n        'r   r   r   r  ',\n        '  r   r   r   r',\n        'r   r   r   r  ',\n    ])\n}\n\n/*\n      0   1   2   3   4   5   6   7\n   ----------------------------------\n0 |       0       1       2       3  |\n1 |   4       5       6       7      |  8\n2 |       9      10      11      12  |\n3 |  13      14      15      16      | 17\n4 |      18      19      20      21  |\n5 |  22      23      24      25      | 26\n6 |      27      28      29      30  |\n7 |  31      32      33      34      | 35\n   ----------------------------------\n */\n\nconst columns = [4, 0, 5, 1, 6, 2, 7, 3]\nfunction fromPosition({ row, column }) {\n    return columns[column] + 9 * Math.floor(row / 2)\n}\n\nfunction toPosition(n) {\n    return {\n        row: Math.floor((n + 1) / 4.5),\n        column: columns.indexOf(n % 9),\n    }\n}\n\nfunction parseState(state) {\n    state = Array.isArray(state)\n        ? state.join('   ')\n        : state.replace(/\\n/g, '   ')\n\n    return state\n        .split('')\n        .filter((_, i) => i % 4 === 2)\n        .map(c =>\n            c === ' '\n                ? null\n                : {\n                      player: c.toLowerCase() === 'r' ? 'red' : 'black',\n                      isKing: c.toUpperCase() === c,\n                  }\n        )\n}\n","import sample from 'lodash/sample'\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport Worker from 'comlink-loader!../workers/minimax.worker'\nimport { getOpponent } from './gameBoard'\n\nconst worker = new Worker()\n\nconst randomStrategy = (board, player) => {\n    const moves = board.availableMovesForPlayer(player)\n    return sample(moves)\n}\n\nconst minimaxStrategy = searchDepth => async (board, player) => {\n    return worker.getBestMove(\n        board.state,\n        searchDepth,\n        player,\n        getOpponent(player)\n    )\n}\n\nclass ArtificialPlayer {\n    constructor(player, strategy) {\n        this.player = player\n        this.strategy = strategy\n    }\n\n    async getNextMove(board) {\n        return this.strategy(board, this.player)\n    }\n}\n\nexport default ArtificialPlayer\n\nexport const Strategy = {\n    easy: randomStrategy,\n    medium: minimaxStrategy(2),\n    hard: minimaxStrategy(4),\n}\n","import styled from 'styled-components/macro'\n\nconst Square = styled.div`\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n    border-color: ${({ theme }) => theme.boardBorderColor};\n    border-style: solid;\n    border-width: 0 1px 1px 0;\n    background-color: ${props =>\n        props.black ? props.theme.boardBlackColor : props.theme.boardRedColor};\n    position: relative;\n`\n\nexport default Square\n","import React, { useContext } from 'react'\nimport { positionsAreEqual } from '../models/gameBoard'\n\nconst GameContext = React.createContext({\n    pieces: [],\n    movesForCurrentPlayer: [],\n    startPosition: null,\n    selectSquare: () => {},\n})\n\nexport default GameContext\n\nexport function useGameContext(row, column) {\n    const currentPosition = { row, column }\n    const {\n        pieces,\n        movesForCurrentPlayer,\n        startPosition,\n        selectSquare,\n    } = useContext(GameContext)\n    const pieceAtPosition = pieces.find(({ position }) =>\n        positionsAreEqual(position, currentPosition)\n    )\n    const isStartPosition = positionsAreEqual(startPosition, currentPosition)\n    const isAvailableDestination =\n        startPosition != null &&\n        movesForCurrentPlayer.some(\n            ({ jumps, from, to }) =>\n                positionsAreEqual(to, currentPosition) &&\n                (jumps && jumps.length > 0\n                    ? jumps.some(p => positionsAreEqual(p, startPosition))\n                    : positionsAreEqual(from, startPosition))\n        )\n\n    return {\n        piece: pieceAtPosition?.piece,\n        isAvailableDestination,\n        isStartPosition,\n        onClick: () => selectSquare(row, column),\n    }\n}\n","import React from 'react'\nimport styled from 'styled-components/macro'\n\nconst TokenRoot = styled.svg`\n    width: 100%;\n    height: 100%;\n\n    .token {\n        fill: ${({ theme, player }) =>\n            player === 'red' ? theme.pieceRed : theme.pieceBlack};\n    }\n\n    .token__border,\n    .token__king {\n        fill: white;\n        fill-opacity: 0.5;\n    }\n`\n\nfunction path(startX, startY) {\n    const segments = []\n\n    const coordinate = (x, y) => [x, y].join(',')\n\n    const pathBuilder = {\n        moveTo(x, y) {\n            segments.push('M', coordinate(x, y))\n            return pathBuilder\n        },\n\n        moveBy(dx, dy) {\n            segments.push('m', coordinate(dx, dy))\n            return pathBuilder\n        },\n\n        lineBy(dx, dy) {\n            segments.push('l', coordinate(dx, dy))\n            return pathBuilder\n        },\n\n        circle(r) {\n            segments.push(\n                'a',\n                coordinate(r, r),\n                0,\n                coordinate(1, 0),\n                coordinate(2 * r, 0)\n            )\n            segments.push(\n                'a',\n                coordinate(r, r),\n                0,\n                coordinate(1, 0),\n                coordinate(-2 * r, 0)\n            )\n            return pathBuilder\n        },\n\n        close() {\n            segments.push('z')\n            return pathBuilder\n        },\n\n        build() {\n            return segments.join(' ')\n        },\n    }\n\n    return pathBuilder.moveTo(startX, startY)\n}\n\nconst tokenRadius = 40\nconst borderOuterRadius = 35\nconst borderInnerRadius = 28\n\nfunction Token({ player, isKing }) {\n    return (\n        <TokenRoot player={player} viewBox=\"0 0 100 100\">\n            <circle className=\"token\" cx=\"50\" cy=\"50\" r={tokenRadius} />\n            <path\n                className=\"token__border\"\n                d={path(50, 50)\n                    .moveBy(-borderOuterRadius, 0)\n                    .circle(borderOuterRadius)\n                    .moveBy(borderOuterRadius - borderInnerRadius, 0)\n                    .circle(borderInnerRadius)\n                    .build()}\n                fillRule=\"evenodd\"\n            />\n            {isKing && (\n                <path\n                    className=\"token__king\"\n                    d={path(50, 60)\n                        .lineBy(15, 0)\n                        .lineBy(5, -15)\n                        .lineBy(-12, 7)\n                        .lineBy(-8, -15)\n                        .lineBy(-8, 15)\n                        .lineBy(-12, -7)\n                        .lineBy(5, 15)\n                        .lineBy(15, 0)\n                        .close()\n                        .moveTo(50 - 3, 60 - 15 + 7 - 15)\n                        .circle(3)\n                        .moveTo(50 + 15 + 5 - 3, 60 - 15)\n                        .circle(3)\n                        .moveTo(50 - 15 - 5 - 3, 60 - 15)\n                        .circle(3)\n                        .build()}\n                />\n            )}\n        </TokenRoot>\n    )\n}\n\nexport default Token\n","import React from 'react'\nimport styled from 'styled-components/macro'\n\nconst moveStartColor = '#FFFFFFCC'\nconst moveEndColor = '#FFF'\n\nconst borderColor = ({ isMoveStart }) =>\n    isMoveStart ? moveStartColor : moveEndColor\n\nconst Indicator = styled.div`\n    position: absolute;\n    width: calc(80% + 6px);\n    height: calc(80% + 6px);\n    left: calc(10% - 3px);\n    top: calc(10% - 3px);\n    border: 3px solid ${borderColor};\n    border-radius: 9999px;\n    box-sizing: border-box;\n`\n\nfunction AvailableMove({ isMoveStart = false }) {\n    return <Indicator isMoveStart={isMoveStart} />\n}\n\nexport default AvailableMove\n","import React from 'react'\nimport styled from 'styled-components/macro'\nimport Square from './Square'\nimport { useGameContext } from './GameContext'\nimport Token from './Token'\nimport AvailableMove from './AvailableMove'\n\nconst BoardSquareContainer = styled.div`\n    position: relative;\n    height: 12.5%;\n    width: 12.5%;\n`\n\nfunction BoardSquare({ x, y }) {\n    const {\n        piece,\n        isStartPosition,\n        isAvailableDestination,\n        onClick,\n    } = useGameContext(y, x)\n    const black = (x + y) % 2 > 0\n\n    return (\n        <BoardSquareContainer onClick={onClick}>\n            <Square black={black}>\n                {piece && <Token {...piece} />}\n                {isAvailableDestination && <AvailableMove />}\n                {isStartPosition && <AvailableMove isMoveStart />}\n            </Square>\n        </BoardSquareContainer>\n    )\n}\n\nexport default BoardSquare\n","import React from 'react'\nimport styled from 'styled-components/macro'\nimport BoardSquare from './BoardSquare'\n\nconst BoardContainer = styled.div`\n    width: 500px;\n    height: 500px;\n    box-sizing: border-box;\n    border-color: ${({ theme }) => theme.boardBorderColor};\n    border-style: solid;\n    border-width: 2px 1px 1px 2px;\n    display: flex;\n    flex-wrap: wrap;\n`\n\nfunction Board() {\n    function renderSquare(i) {\n        const x = i % 8\n        const y = Math.floor(i / 8)\n\n        return <BoardSquare key={i} x={x} y={y} />\n    }\n\n    const squares = new Array(64).fill(null).map((_, i) => renderSquare(i))\n    return <BoardContainer>{squares}</BoardContainer>\n}\n\nexport default React.memo(Board)\n","import React, {\n    useCallback,\n    useEffect,\n    useMemo,\n    useReducer,\n    useRef,\n} from 'react'\nimport styled, { createGlobalStyle } from 'styled-components/macro'\nimport { GameBoard, getOpponent, positionsAreEqual } from '../models/gameBoard'\nimport ArtificialPlayer, { Strategy } from '../models/ArtificialPlayer'\nimport Board from './Board'\nimport GameContext from './GameContext'\n\nconst Globals = createGlobalStyle`\n  body {\n    background-color: #00731d;\n    font-family: sans-serif;\n    margin: 0;\n  }\n`\n\nconst Title = styled.h1`\n    color: white;\n    text-align: center;\n`\n\nconst GameStateDisplay = styled.h2`\n    color: white;\n    text-transform: capitalize;\n`\n\nconst GameState = {\n    inProgress: 'inProgress',\n    win: 'win',\n    draw: 'draw',\n}\n\nfunction getInitialState(board) {\n    return {\n        currentPlayer: 'black',\n        pieces: board.getPieces(),\n        startPosition: null,\n        gameState: GameState.inProgress,\n    }\n}\n\nfunction createAction(type) {\n    const actionCreator = payload => ({ type, payload })\n    actionCreator.type = type\n\n    return actionCreator\n}\n\nconst setStartPosition = createAction('setStartPosition')\nconst makeMove = createAction('makeMove')\nconst reset = createAction('reset')\n\nfunction gameReducer(state, { type, payload }) {\n    switch (type) {\n        case setStartPosition.type:\n            return { ...state, startPosition: payload }\n        case makeMove.type: {\n            const { board, move } = payload\n            const pieces = board.makeMove(\n                move,\n                state.availableMovesForCurrentPlayer\n            )\n            const opponent = state.currentPlayer\n            const currentPlayer = getOpponent(state.currentPlayer)\n            const availableMovesForCurrentPlayer = board.availableMovesForPlayer(\n                currentPlayer\n            )\n\n            const nextState = {\n                ...state,\n                pieces,\n                currentPlayer,\n                availableMovesForCurrentPlayer,\n                startPosition: null,\n            }\n\n            if (availableMovesForCurrentPlayer.length === 0) {\n                const movesForOpponent = board.availableMovesForPlayer(opponent)\n                if (movesForOpponent.length === 0) {\n                    nextState.gameState = GameState.draw\n                } else {\n                    nextState.gameState = GameState.win\n                    nextState.winner = opponent\n                }\n            }\n\n            return nextState\n        }\n        case reset.type:\n            return getInitialState(payload)\n        default:\n            return state\n    }\n}\n\nfunction CheckersGame() {\n    const aiPlayer = useRef(new ArtificialPlayer('black', Strategy.medium))\n    const boardRef = useRef(new GameBoard())\n    const board = boardRef.current\n    const [\n        {\n            currentPlayer,\n            availableMovesForCurrentPlayer,\n            pieces,\n            startPosition,\n            gameState,\n            winner,\n        },\n        dispatch,\n    ] = useReducer(gameReducer, board, getInitialState)\n\n    useEffect(() => {\n        if (\n            currentPlayer === aiPlayer.current.player &&\n            gameState === GameState.inProgress\n        ) {\n            aiPlayer.current\n                .getNextMove(boardRef.current)\n                .then(({ move, moves }) => {\n                    dispatch(makeMove({ board, move }))\n                })\n        }\n    }, [currentPlayer, board, gameState])\n\n    const selectSquare = useCallback(\n        (row, column) => {\n            if (aiPlayer.current && currentPlayer === aiPlayer.current.player) {\n                return\n            }\n\n            const selectedPosition = { row, column }\n            const pieceAtPosition = board.getPieceAtPosition(selectedPosition)\n\n            if (!startPosition) {\n                if (pieceAtPosition?.player === currentPlayer) {\n                    dispatch(setStartPosition(selectedPosition))\n                }\n            } else if (positionsAreEqual(selectedPosition, startPosition)) {\n                dispatch(setStartPosition(null))\n            } else if (pieceAtPosition?.player === currentPlayer) {\n                dispatch(setStartPosition(selectedPosition))\n            } else {\n                const move = availableMovesForCurrentPlayer.find(\n                    ({ from, to, jumps }) =>\n                        positionsAreEqual(to, selectedPosition) &&\n                        (jumps && jumps.length > 0\n                            ? positionsAreEqual(jumps[0], startPosition)\n                            : positionsAreEqual(from, startPosition))\n                )\n                if (move) {\n                    dispatch(makeMove({ board, move }))\n                }\n            }\n        },\n        [startPosition, board, currentPlayer, availableMovesForCurrentPlayer]\n    )\n\n    const contextValue = useMemo(\n        () => ({\n            pieces,\n            movesForCurrentPlayer: availableMovesForCurrentPlayer,\n            startPosition,\n            selectSquare,\n        }),\n        [pieces, availableMovesForCurrentPlayer, startPosition, selectSquare]\n    )\n\n    return (\n        <>\n            <Globals />\n            <GameContext.Provider value={contextValue}>\n                <div\n                    css={{\n                        height: '100vh',\n                        width: '100vw',\n                        display: 'flex',\n                        flexDirection: 'column',\n                    }}\n                >\n                    <Title>Checkers</Title>\n                    <div\n                        css={{\n                            flex: 1,\n                            display: 'flex',\n                            flexDirection: 'row-reverse',\n                            padding: 20,\n                        }}\n                    >\n                        <div css={{ flex: 1, paddingLeft: 20 }}>\n                            <GameStateDisplay>\n                                {gameState === GameState.inProgress && (\n                                    <span>Current player: {currentPlayer}</span>\n                                )}\n                                {gameState === GameState.draw && (\n                                    <span>Draw!</span>\n                                )}\n                                {gameState === GameState.win && (\n                                    <span>{winner} wins!</span>\n                                )}\n                            </GameStateDisplay>\n                        </div>\n                        <Board />\n                    </div>\n                </div>\n            </GameContext.Provider>\n        </>\n    )\n}\n\nexport default CheckersGame\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ThemeProvider } from 'styled-components/macro'\nimport theme from './theme'\nimport CheckersGame from './components/CheckersGame'\n\nReactDOM.render(\n    <React.StrictMode>\n        <ThemeProvider theme={theme}>\n            <CheckersGame />\n        </ThemeProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n","var wrap = require('comlink').wrap,Worker = require(\"!worker-loader?{}!/Users/mike/repos/reactjs-challenge-checkers/node_modules/comlink-loader/dist/comlink-worker-loader.js!/Users/mike/repos/reactjs-challenge-checkers/node_modules/react-scripts/node_modules/babel-loader/lib/index.js??ref--5-oneOf-2!/Users/mike/repos/reactjs-challenge-checkers/src/workers/minimax.worker.js\"),inst;module.exports = function f() {if (this instanceof f) return wrap(Worker());return inst || (inst = wrap(Worker()));};"],"sourceRoot":""}